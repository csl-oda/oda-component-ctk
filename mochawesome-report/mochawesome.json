{
  "stats": {
    "suites": 3,
    "tests": 26,
    "passes": 25,
    "pending": 0,
    "failures": 1,
    "start": "2023-03-11T16:57:52.439Z",
    "end": "2023-03-11T16:57:53.372Z",
    "duration": 933,
    "testsRegistered": 26,
    "passPercent": 96.15384615384616,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6fdf15ef-9f54-4f50-b575-c78b65d4a218",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bf4892f1-7876-4023-ae52-f06504df8da3",
          "title": "Step 0: Basic file tests for component r1-productcatalog.component.yaml",
          "fullFile": "/home/labosis/Projects/TMF/ODA/Conformance/oda-component-ctk/L1-staticValidationTests.js",
          "file": "/L1-staticValidationTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "File naming convention",
              "fullTitle": "Step 0: Basic file tests for component r1-productcatalog.component.yaml File naming convention",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nameArray = componentEnvelopeName.split('.')\nexpect(nameArray[nameArray.length - 2], \"Filename should end '.component.yaml'\").to.equal('component')\nexpect(nameArray[nameArray.length - 1], \"Filename should end '.component.yaml'\").to.equal('yaml')\ndone()",
              "err": {},
              "uuid": "9284fd29-9b50-40e7-86de-495d6fc65b30",
              "parentUUID": "bf4892f1-7876-4023-ae52-f06504df8da3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Valid YAML document(s)",
              "fullTitle": "Step 0: Basic file tests for component r1-productcatalog.component.yaml Valid YAML document(s)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// check that the file contains 1 or more YAML documents and that documents parse with zero errors\n      documentArray = YAML.parseAllDocuments(file)\n      expect(documentArray, 'The file shold contain at least one YAML document.').to.be.a('array')\n      expect(documentArray.length, 'The file shold contain at least one YAML document.').to.be.greaterThan(0)\n      // go through each document checking for errors\n      for (const docKey in documentArray) {\n        expect(documentArray[docKey].errors.length, 'YAML parsing error.' + documentArray[docKey].errors.toString()).to.equal(0)\n      }\n      done()",
              "err": {},
              "uuid": "acfbb8b7-ee55-4a2d-9fa1-ba8c6bbdc898",
              "parentUUID": "bf4892f1-7876-4023-ae52-f06504df8da3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9284fd29-9b50-40e7-86de-495d6fc65b30",
            "acfbb8b7-ee55-4a2d-9fa1-ba8c6bbdc898"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3dea32a8-ef30-4b92-b040-781eb2b88583",
          "title": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml",
          "fullFile": "/home/labosis/Projects/TMF/ODA/Conformance/oda-component-ctk/L1-staticValidationTests.js",
          "file": "/L1-staticValidationTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Contains document of kind: component",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Contains document of kind: component",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// eslint-disable-next-line no-unused-expressions\nexpect(componentDoc, \"The document should have a field of 'kind: component'.\").to.not.be.null\ndone()",
              "err": {},
              "uuid": "a8ca780c-469a-4633-8e1e-02cad17e49dd",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Component apiVersion \"oda.tmforum.org/v1alpha4\" is within supported versions",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Component apiVersion \"oda.tmforum.org/v1alpha4\" is within supported versions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const supportedVersions = ['oda.tmforum.org/v1alpha2', 'oda.tmforum.org/v1alpha3', 'oda.tmforum.org/v1alpha4', 'oda.tmforum.org/v1beta1']\nexpect(componentDoc.get('apiVersion'), \"Component should have an 'apiVersion' field of type string\").to.be.a('string')\nexpect(componentDoc.get('apiVersion')).to.be.oneOf(supportedVersions, \"'apiVersion' should be within supported versions \" + supportedVersions);\ndone()",
              "err": {},
              "uuid": "6d7d7472-f58f-4aa8-873d-8592b898d299",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Component has metadata",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Component has metadata",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(componentDoc.get('metadata'), \"Component should have a 'metadata' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "235da189-ec15-42e1-b879-9c1d65a5b3ed",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Metadata has name and labels",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Metadata has name and labels",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const metadata = componentDoc.get('metadata')\nexpect(metadata.get('name'), \"Metadata should have a 'name' field of type string\").to.be.a('string')\nexpect(metadata.get('labels'), \"Metadata should have a 'labels' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "04c969a0-9c84-4c88-aa11-9b539db96fd5",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Component has spec",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Component has spec",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(componentDoc.get('spec'), \"Component should have a 'spec' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "3846a909-0a20-44ed-89a4-01e786768b68",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spec has type, version, description, maintainers, owners ",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Spec has type, version, description, maintainers, owners ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nexpect(spec.get('type'), \"Spec should have a 'type' field of type string\").to.be.a('string')\nexpect(spec.get('version'), \"Spec should have a 'version' field of type string\").to.be.a('string')\nexpect(spec.get('description'), \"Spec should have a 'description' field of type string\").to.be.a('string')\nexpect(spec.get('maintainers'), \"Spec should have a 'maintainers' field of type object\").to.be.a('object')\nexpect(spec.get('owners'), \"Spec should have a 'owners' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "95c45256-26f2-4a2a-98c2-70b536a951c6",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spec has coreFunction with exposedAPIs and dependentAPIs",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Spec has coreFunction with exposedAPIs and dependentAPIs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst coreFunction = spec.get('coreFunction')\nexpect(coreFunction, 'Spec has a coreFunction field of type object').to.be.a('object')\nexpect(coreFunction.get('exposedAPIs'), \"coreFunction should have a 'exposedAPIs' field of type object\").to.be.a('object')\nexpect(coreFunction.get('dependentAPIs'), \"coreFunction should have a 'dependentAPIs' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "68bfe227-7e8a-4b9c-b858-5e0174d76ecd",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Swagger file of coreFunction exposedAPIs and dependentAPIs is accessible",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Swagger file of coreFunction exposedAPIs and dependentAPIs is accessible",
              "timedOut": false,
              "duration": 894,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst coreFunction = spec.get('coreFunction')\nexpect(coreFunction, 'Spec has a coreFunction field of type object').to.be.a('object')\nexpect(coreFunction.get('exposedAPIs'), \"coreFunction should have a 'exposedAPIs' field of type object\").to.be.a('object')\nexpect(coreFunction.get('dependentAPIs'), \"coreFunction should have a 'dependentAPIs' field of type object\").to.be.a('object')\nconst exposedAPIsArray = coreFunction.get('exposedAPIs').items\nfor (const key in exposedAPIsArray) {\n  const specification = exposedAPIsArray[key].get('specification')\n  const httpScheme = specification.split('://')[0] + '://'\n  const server = specification.split('://')[1].split('/')[0]\n  const apiPath = '/' + specification.split('://')[1].split(/\\/(.+)/)[1]\n  const res = await chai.request(httpScheme + server).get(apiPath).send()\n  expect(res.status, 'Swagger ' + specification + ' has a return code of 200').to.equal(200)\n}\nconst dependentAPIs = coreFunction.get('dependentAPIs').items\nfor (const key in dependentAPIs) {\n  const specification = dependentAPIs[key].get('specification')\n  const httpScheme = specification.split('://')[0] + '://'\n  const server = specification.split('://')[1].split('/')[0]\n  const apiPath = '/' + specification.split('://')[1].split(/\\/(.+)/)[1]\n  const res = await chai.request(httpScheme + server).get(apiPath).send()\n  expect(res.status, 'Swagger ' + specification + ' has a return code of 200').to.equal(200)\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND open-api.tmforum.org",
                "estack": "Error: getaddrinfo ENOTFOUND open-api.tmforum.org\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:107:26)",
                "diff": null
              },
              "uuid": "c6a09604-dc3b-4f3e-a458-6d2afa70488f",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spec has management",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Spec has management",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst management = spec.get('management')\ndone()\nexpect(management, 'Spec has a management field of type object').to.be.a('object')",
              "err": {},
              "uuid": "4b92f7c9-701a-4090-8ea8-f23e3504d714",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spec has security",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Spec has security",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst security = spec.get('security')\nexpect(security, 'Spec has a security field of type object').to.be.a('object')\ndone()",
              "err": {},
              "uuid": "433e6945-e86d-4883-bdee-f32e9fa785c8",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Security has partyrole",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Security has partyrole",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst security = spec.get('security')\nconst partyrole = security.get('partyrole')\nexpect(partyrole, 'Security property includes a partyrole field of type object').to.be.a('object')\nconst specification = partyrole.get('specification')\nexpect(specification, 'partyrole property includes a specification field of type string').to.be.a('string')\nconst implementation = partyrole.get('implementation')\nexpect(implementation, 'partyrole property includes an implementation field of type string').to.be.a('string')\nconst path = partyrole.get('path')\nexpect(path, 'partyrole property includes a path field of type string').to.be.a('string')\ndone()",
              "err": {},
              "uuid": "c9873630-958c-47d5-8dc1-7927d42e3c4f",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Security has controllerRole",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Security has controllerRole",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst security = spec.get('security')\nconst controllerRole = security.get('controllerRole')\nexpect(controllerRole, 'security object includes a controllerRole property of type string').to.be.a('string')\ndone()",
              "err": {},
              "uuid": "8da2d2e0-34cd-4683-ae80-67c2ef6d6056",
              "parentUUID": "3dea32a8-ef30-4b92-b040-781eb2b88583",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8ca780c-469a-4633-8e1e-02cad17e49dd",
            "6d7d7472-f58f-4aa8-873d-8592b898d299",
            "235da189-ec15-42e1-b879-9c1d65a5b3ed",
            "04c969a0-9c84-4c88-aa11-9b539db96fd5",
            "3846a909-0a20-44ed-89a4-01e786768b68",
            "95c45256-26f2-4a2a-98c2-70b536a951c6",
            "68bfe227-7e8a-4b9c-b858-5e0174d76ecd",
            "4b92f7c9-701a-4090-8ea8-f23e3504d714",
            "433e6945-e86d-4883-bdee-f32e9fa785c8",
            "c9873630-958c-47d5-8dc1-7927d42e3c4f",
            "8da2d2e0-34cd-4683-ae80-67c2ef6d6056"
          ],
          "failures": [
            "c6a09604-dc3b-4f3e-a458-6d2afa70488f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 898,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "91d503fe-be4b-448c-ba15-220c9f51517a",
          "title": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml",
          "fullFile": "/home/labosis/Projects/TMF/ODA/Conformance/oda-component-ctk/L1-staticValidationTests.js",
          "file": "/L1-staticValidationTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Resource 0 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 0 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "59619373-3dae-41ef-8444-1ea8d54bd85b",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 1 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 1 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "449b1f2f-5316-4b0c-b1fe-c1418194f948",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 2 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 2 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "f5e17f5b-5932-4a45-889b-b086520f3156",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 3 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 3 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "57e9050b-3107-4e65-83ac-86539a553cf8",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 4 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 4 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "fda74fc8-6372-4478-a795-a66281da0e78",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 5 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 5 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "71f60c1c-06e9-4ec7-8595-51f0c153e440",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 6 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 6 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "2550e9ba-bc7c-4708-9387-89395a34d87f",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 7 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 7 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "a7ea2c0a-0ee2-4479-8115-63204d932ff7",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 8 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 8 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "b5264a97-4e4f-48fe-a620-a6ce204a3f5b",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 9 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 9 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "cf51f554-ea0d-44a6-a959-0f2d17856da8",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 10 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 10 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "f23dce6d-f905-4e6f-8d33-affaa74703c6",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 11 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 11 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "a02e4eed-848e-4191-94dc-3bd48ff19ec3",
              "parentUUID": "91d503fe-be4b-448c-ba15-220c9f51517a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59619373-3dae-41ef-8444-1ea8d54bd85b",
            "449b1f2f-5316-4b0c-b1fe-c1418194f948",
            "f5e17f5b-5932-4a45-889b-b086520f3156",
            "57e9050b-3107-4e65-83ac-86539a553cf8",
            "fda74fc8-6372-4478-a795-a66281da0e78",
            "71f60c1c-06e9-4ec7-8595-51f0c153e440",
            "2550e9ba-bc7c-4708-9387-89395a34d87f",
            "a7ea2c0a-0ee2-4479-8115-63204d932ff7",
            "b5264a97-4e4f-48fe-a620-a6ce204a3f5b",
            "cf51f554-ea0d-44a6-a959-0f2d17856da8",
            "f23dce6d-f905-4e6f-8d33-affaa74703c6",
            "a02e4eed-848e-4191-94dc-3bd48ff19ec3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}