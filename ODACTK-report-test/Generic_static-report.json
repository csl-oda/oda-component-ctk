{
  "stats": {
    "suites": 3,
    "tests": 26,
    "passes": 25,
    "pending": 0,
    "failures": 1,
    "start": "2023-03-12T03:33:29.109Z",
    "end": "2023-03-12T03:33:30.229Z",
    "duration": 1120,
    "testsRegistered": 26,
    "passPercent": 96.15384615384616,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d3e67ee6-088b-4e32-9ef4-30268c2632f2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7832bfdc-82cc-4ae3-916e-b1f3418bf95e",
          "title": "Step 0: Basic file tests for component r1-productcatalog.component.yaml",
          "fullFile": "/home/labosis/Projects/TMF/ODA/Conformance/oda-component-ctk/L1-staticValidationTests.js",
          "file": "/L1-staticValidationTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "File naming convention",
              "fullTitle": "Step 0: Basic file tests for component r1-productcatalog.component.yaml File naming convention",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nameArray = componentEnvelopeName.split('.')\nexpect(nameArray[nameArray.length - 2], \"Filename should end '.component.yaml'\").to.equal('component')\nexpect(nameArray[nameArray.length - 1], \"Filename should end '.component.yaml'\").to.equal('yaml')\ndone()",
              "err": {},
              "uuid": "695ca806-4a86-4457-9ca5-56e509b07127",
              "parentUUID": "7832bfdc-82cc-4ae3-916e-b1f3418bf95e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Valid YAML document(s)",
              "fullTitle": "Step 0: Basic file tests for component r1-productcatalog.component.yaml Valid YAML document(s)",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// check that the file contains 1 or more YAML documents and that documents parse with zero errors\n      documentArray = YAML.parseAllDocuments(file)\n      expect(documentArray, 'The file shold contain at least one YAML document.').to.be.a('array')\n      expect(documentArray.length, 'The file shold contain at least one YAML document.').to.be.greaterThan(0)\n      // go through each document checking for errors\n      for (const docKey in documentArray) {\n        expect(documentArray[docKey].errors.length, 'YAML parsing error.' + documentArray[docKey].errors.toString()).to.equal(0)\n      }\n      done()",
              "err": {},
              "uuid": "aca3799a-a42a-4376-9fcc-806e875ed401",
              "parentUUID": "7832bfdc-82cc-4ae3-916e-b1f3418bf95e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "695ca806-4a86-4457-9ca5-56e509b07127",
            "aca3799a-a42a-4376-9fcc-806e875ed401"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "33628402-1eef-4bf5-a213-8c803cd551a0",
          "title": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml",
          "fullFile": "/home/labosis/Projects/TMF/ODA/Conformance/oda-component-ctk/L1-staticValidationTests.js",
          "file": "/L1-staticValidationTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Contains document of kind: component",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Contains document of kind: component",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// eslint-disable-next-line no-unused-expressions\nexpect(componentDoc, \"The document should have a field of 'kind: component'.\").to.not.be.null\ndone()",
              "err": {},
              "uuid": "3f7d893b-5a3d-443a-bbf2-8070a191808d",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Component apiVersion \"oda.tmforum.org/v1alpha4\" is within supported versions",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Component apiVersion \"oda.tmforum.org/v1alpha4\" is within supported versions",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const supportedVersions = ['oda.tmforum.org/v1alpha2', 'oda.tmforum.org/v1alpha3', 'oda.tmforum.org/v1alpha4', 'oda.tmforum.org/v1beta1']\nexpect(componentDoc.get('apiVersion'), \"Component should have an 'apiVersion' field of type string\").to.be.a('string')\nexpect(componentDoc.get('apiVersion')).to.be.oneOf(supportedVersions, \"'apiVersion' should be within supported versions \" + supportedVersions);\ndone()",
              "err": {},
              "uuid": "9ac37842-e94d-4988-bf6c-d11d119da6b7",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Component has metadata",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Component has metadata",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(componentDoc.get('metadata'), \"Component should have a 'metadata' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "f603ebc0-1056-4c6f-bfcc-715874a92034",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Metadata has name and labels",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Metadata has name and labels",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const metadata = componentDoc.get('metadata')\nexpect(metadata.get('name'), \"Metadata should have a 'name' field of type string\").to.be.a('string')\nexpect(metadata.get('labels'), \"Metadata should have a 'labels' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "66be27ff-dffb-4d26-ade0-b22020712947",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Component has spec",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Component has spec",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(componentDoc.get('spec'), \"Component should have a 'spec' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "3400a125-b2cc-4757-90dc-4d2ce322ceab",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spec has type, version, description, maintainers, owners ",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Spec has type, version, description, maintainers, owners ",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nexpect(spec.get('type'), \"Spec should have a 'type' field of type string\").to.be.a('string')\nexpect(spec.get('version'), \"Spec should have a 'version' field of type string\").to.be.a('string')\nexpect(spec.get('description'), \"Spec should have a 'description' field of type string\").to.be.a('string')\nexpect(spec.get('maintainers'), \"Spec should have a 'maintainers' field of type object\").to.be.a('object')\nexpect(spec.get('owners'), \"Spec should have a 'owners' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "37246441-8762-4edd-afb5-bbcd27e8e587",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spec has coreFunction with exposedAPIs and dependentAPIs",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Spec has coreFunction with exposedAPIs and dependentAPIs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst coreFunction = spec.get('coreFunction')\nexpect(coreFunction, 'Spec has a coreFunction field of type object').to.be.a('object')\nexpect(coreFunction.get('exposedAPIs'), \"coreFunction should have a 'exposedAPIs' field of type object\").to.be.a('object')\nexpect(coreFunction.get('dependentAPIs'), \"coreFunction should have a 'dependentAPIs' field of type object\").to.be.a('object')\ndone()",
              "err": {},
              "uuid": "c26c79a2-0305-4282-b1c6-9232e406fa22",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Swagger file of coreFunction exposedAPIs and dependentAPIs is accessible",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Swagger file of coreFunction exposedAPIs and dependentAPIs is accessible",
              "timedOut": false,
              "duration": 1070,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst coreFunction = spec.get('coreFunction')\nexpect(coreFunction, 'Spec has a coreFunction field of type object').to.be.a('object')\nexpect(coreFunction.get('exposedAPIs'), \"coreFunction should have a 'exposedAPIs' field of type object\").to.be.a('object')\nexpect(coreFunction.get('dependentAPIs'), \"coreFunction should have a 'dependentAPIs' field of type object\").to.be.a('object')\nconst exposedAPIsArray = coreFunction.get('exposedAPIs').items\nfor (const key in exposedAPIsArray) {\n  const specification = exposedAPIsArray[key].get('specification')\n  const httpScheme = specification.split('://')[0] + '://'\n  const server = specification.split('://')[1].split('/')[0]\n  const apiPath = '/' + specification.split('://')[1].split(/\\/(.+)/)[1]\n  const res = await chai.request(httpScheme + server).get(apiPath).send()\n  expect(res.status, 'Swagger ' + specification + ' has a return code of 200').to.equal(200)\n}\nconst dependentAPIs = coreFunction.get('dependentAPIs').items\nfor (const key in dependentAPIs) {\n  const specification = dependentAPIs[key].get('specification')\n  const httpScheme = specification.split('://')[0] + '://'\n  const server = specification.split('://')[1].split('/')[0]\n  const apiPath = '/' + specification.split('://')[1].split(/\\/(.+)/)[1]\n  const res = await chai.request(httpScheme + server).get(apiPath).send()\n  expect(res.status, 'Swagger ' + specification + ' has a return code of 200').to.equal(200)\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND open-api.tmforum.org",
                "estack": "Error: getaddrinfo ENOTFOUND open-api.tmforum.org\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:107:26)",
                "diff": null
              },
              "uuid": "5b1db9de-3ab5-4f16-8d00-39b8fc0c63ff",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spec has management",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Spec has management",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst management = spec.get('management')\ndone()\nexpect(management, 'Spec has a management field of type object').to.be.a('object')",
              "err": {},
              "uuid": "14e516f3-fcf3-4c22-a856-5f907d366f4a",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spec has security",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Spec has security",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst security = spec.get('security')\nexpect(security, 'Spec has a security field of type object').to.be.a('object')\ndone()",
              "err": {},
              "uuid": "2d7d0a07-6231-4390-ac20-d76992ccfbfc",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Security has partyrole",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Security has partyrole",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst security = spec.get('security')\nconst partyrole = security.get('partyrole')\nexpect(partyrole, 'Security property includes a partyrole field of type object').to.be.a('object')\nconst specification = partyrole.get('specification')\nexpect(specification, 'partyrole property includes a specification field of type string').to.be.a('string')\nconst implementation = partyrole.get('implementation')\nexpect(implementation, 'partyrole property includes an implementation field of type string').to.be.a('string')\nconst path = partyrole.get('path')\nexpect(path, 'partyrole property includes a path field of type string').to.be.a('string')\ndone()",
              "err": {},
              "uuid": "bce14799-9d02-48d7-ae33-84ef3a1a2a71",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Security has controllerRole",
              "fullTitle": "Step 1: Check ODA-Component Metadata for component r1-productcatalog.component.yaml Security has controllerRole",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = componentDoc.get('spec')\nconst security = spec.get('security')\nconst controllerRole = security.get('controllerRole')\nexpect(controllerRole, 'security object includes a controllerRole property of type string').to.be.a('string')\ndone()",
              "err": {},
              "uuid": "79f6518b-a1cd-43e4-893b-86ae8f2bf366",
              "parentUUID": "33628402-1eef-4bf5-a213-8c803cd551a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f7d893b-5a3d-443a-bbf2-8070a191808d",
            "9ac37842-e94d-4988-bf6c-d11d119da6b7",
            "f603ebc0-1056-4c6f-bfcc-715874a92034",
            "66be27ff-dffb-4d26-ade0-b22020712947",
            "3400a125-b2cc-4757-90dc-4d2ce322ceab",
            "37246441-8762-4edd-afb5-bbcd27e8e587",
            "c26c79a2-0305-4282-b1c6-9232e406fa22",
            "14e516f3-fcf3-4c22-a856-5f907d366f4a",
            "2d7d0a07-6231-4390-ac20-d76992ccfbfc",
            "bce14799-9d02-48d7-ae33-84ef3a1a2a71",
            "79f6518b-a1cd-43e4-893b-86ae8f2bf366"
          ],
          "failures": [
            "5b1db9de-3ab5-4f16-8d00-39b8fc0c63ff"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1076,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e3520433-b81e-4c07-adb2-2eb15e158e43",
          "title": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml",
          "fullFile": "/home/labosis/Projects/TMF/ODA/Conformance/oda-component-ctk/L1-staticValidationTests.js",
          "file": "/L1-staticValidationTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Resource 0 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 0 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "88bb46bd-650b-418a-b263-e1ddccee5ccd",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 1 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 1 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "23a2255b-5a80-467b-b2ba-893ca63d48b2",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 2 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 2 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "b4e56a46-b005-457b-8bd6-cedec01069e3",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 3 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 3 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "2d2f08f6-f807-473f-835a-307f36516e96",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 4 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 4 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "601dd93a-84fc-4384-95a7-d0f4b597928c",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 5 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 5 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "56af5ca8-da28-4079-9fe5-c08cf81eeb8d",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 6 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 6 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "177a4bd7-a96b-4eb9-8ede-db1cada0b705",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 7 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 7 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "8a08265f-6759-4900-9a6c-a50313a498ec",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 8 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 8 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "7d6c217b-fd3a-4494-a573-338dc14c0187",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 9 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 9 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "f08f6155-46bc-402d-8ec2-0f4e0fce531e",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 10 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 10 is labelled",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "d538572d-7f09-4cb6-83a0-2f8d1a30d410",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resource 11 is labelled",
              "fullTitle": "Step 2: Check any standard kubernetes resources are labelled for component r1-productcatalog.component.yaml Resource 11 is labelled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docResource = documentArray[i]\nconst docMetadata = docResource.get('metadata')\nexpect(docMetadata, 'Resource has a metadata field of type object').to.be.a('object')\nconst docName = docMetadata.get('name')\nconst docLabels = docMetadata.get('labels')\nexpect(docLabels, docName + ' resource has a metadata field with labels of type object').to.be.a('object')\nconst componentNameLabel = docLabels.get('oda.tmforum.org/componentName')\nexpect(componentNameLabel, docName + ' resource has a oda.tmforum.org/componentName label of type string').to.be.a('string')\nexpect(componentNameLabel, docName + \" resource has a oda.tmforum.org/componentName label matching the component name '\" + inComponentName + \"'\").to.equal(inComponentName)\ndone()",
              "err": {},
              "uuid": "a9391276-54fb-4986-a70a-fc92859e1ff5",
              "parentUUID": "e3520433-b81e-4c07-adb2-2eb15e158e43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88bb46bd-650b-418a-b263-e1ddccee5ccd",
            "23a2255b-5a80-467b-b2ba-893ca63d48b2",
            "b4e56a46-b005-457b-8bd6-cedec01069e3",
            "2d2f08f6-f807-473f-835a-307f36516e96",
            "601dd93a-84fc-4384-95a7-d0f4b597928c",
            "56af5ca8-da28-4079-9fe5-c08cf81eeb8d",
            "177a4bd7-a96b-4eb9-8ede-db1cada0b705",
            "8a08265f-6759-4900-9a6c-a50313a498ec",
            "7d6c217b-fd3a-4494-a573-338dc14c0187",
            "f08f6155-46bc-402d-8ec2-0f4e0fce531e",
            "d538572d-7f09-4cb6-83a0-2f8d1a30d410",
            "a9391276-54fb-4986-a70a-fc92859e1ff5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "Generic_static-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results/baseline-ctk",
        "reportFilename": "Generic_static-report",
        "reportTitle": "Generic Static CTK Report"
      },
      "version": "6.2.0"
    }
  }
}